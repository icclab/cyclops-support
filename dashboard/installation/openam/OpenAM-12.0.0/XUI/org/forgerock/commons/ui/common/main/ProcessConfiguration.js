define("org/forgerock/commons/ui/common/main/ProcessConfiguration",["org/forgerock/commons/ui/common/util/Constants","org/forgerock/commons/ui/common/main/EventManager","org/forgerock/commons/ui/common/main/Configuration","org/forgerock/commons/ui/common/main/AbstractConfigurationAware"],function(e,t,n,r){var i=new r;return i.em=t,t.registerListener(e.EVENT_CONFIGURATION_CHANGED,function(e){i.callService(e.moduleClass,"updateConfigurationCallback",[e.configuration])}),t.registerListener(e.EVENT_DEPENDECIES_LOADED,function(n){i.callService("org/forgerock/commons/ui/common/main/Configuration","sendConfigurationChangeInfo"),i.registerAllListenersFromConfig(),t.sendEvent(e.EVENT_READ_CONFIGURATION_REQUEST)}),i.callRegisterListenerFromConfig=function(e){t.registerListener(e.startEvent,function(t){var n,r;e.description&&console.info("Event processing: ",e.description),r=[t];for(n=0;n<e.dependencies.length;n++)r.push(require(e.dependencies[n]));e.processDescription.apply(this,r)})},i.registerAllListenersFromConfig=function(){var e,t=[],n=[];_.each(i.configuration.processConfigurationFiles,function(r){e=require(r),_.each(e,function(e){e.override&&n.push(e.startEvent),t.push(e)})}),_.each(n,function(e){t=_.reject(t,function(t){return t.startEvent===e&&!t.override})}),_.each(t,function(e){i.callRegisterListenerFromConfig(e)})},i.callService=function(e,t,n){try{var r=require(e);r&&r[t].apply(r,n||[])}catch(i){n&&(n=JSON.stringify(n)),console.warn("Unable to invoke serviceId="+e+" method="+t+" params="+n+" exception="+i)}},i})